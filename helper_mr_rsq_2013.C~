{
  Int_t font = 42;

  gStyle->SetPalette(1);
  gStyle->SetTitleX(0.3);
  gStyle->SetTitleW(0.4);
  gStyle->SetCanvasBorderMode(0);
  gStyle->SetCanvasColor(kWhite);
  gStyle->SetCanvasDefH(600); //Height of canvas
  gStyle->SetCanvasDefW(800); //Width of canvas
  gStyle->SetCanvasDefX(0);   //POsition on screen
  gStyle->SetCanvasDefY(0);

  gStyle->SetPadBorderMode(0);
  // gStyle->SetPadBorderSize(Width_t size = 1);
  gStyle->SetPadColor(kWhite);
  gStyle->SetPadGridX(false);
  gStyle->SetPadGridY(false);
  gStyle->SetGridColor(0);
  gStyle->SetGridStyle(3);
  gStyle->SetGridWidth(1);

  //for the frame
  gStyle->SetFrameBorderMode(0);
  gStyle->SetFrameBorderSize(1);
  gStyle->SetFrameFillColor(0);
  gStyle->SetFrameFillStyle(0);
  gStyle->SetFrameLineColor(1);
  gStyle->SetFrameLineStyle(1);
  gStyle->SetFrameLineWidth(1);

  gStyle->SetPaperSize(20,26);
  gStyle->SetPadTopMargin(0.1);
  gStyle->SetPadRightMargin(0.12);
  gStyle->SetPadBottomMargin(0.2);
  gStyle->SetPadLeftMargin(0.17);

  gStyle->SetTitleBorderSize(0);
  gStyle->SetTitleFont(font,"xyz");  // set the all 3 axes title font
  gStyle->SetTitleFont(font," ");    // set the pad title font
  gStyle->SetTitleSize(0.06,"xyz"); // set the 3 axes title size
  gStyle->SetTitleSize(0.06," ");   // set the pad title size
  gStyle->SetTitleFillColor(0);
  gStyle->SetLabelFont(font,"xyz");
  gStyle->SetLabelSize(0.035,"xyz");
  gStyle->SetLabelColor(1,"xyz");
  gStyle->SetTextFont(font);
  gStyle->SetTextSize(0.08);
  gStyle->SetStatFont(font);

  //tick marks
  gStyle->SetPadTickX(1);
  gStyle->SetPadTickY(1);

  const Int_t NRGBs = 5;
  const Int_t NCont = 255;
  Double_t stops[NRGBs] = { 0.00, 0.34, 0.61, 0.84, 1.00 };
  Double_t red[NRGBs] = { 0.00, 0.00, 0.87, 1.00, 0.51 };
  Double_t green[NRGBs] = { 0.00, 0.81, 1.00, 0.20, 0.00 };
  Double_t blue[NRGBs] = { 0.51, 1.00, 0.12, 0.00, 0.00 };
  TColor::CreateGradientColorTable(NRGBs, stops, red, green, blue, NCont);
  gStyle->SetNumberContours(NCont);


  //SET UP THE CUTS AND HISTOGRAM LIMITS

  TCut cut_gg = "PFMR>0";
  TCut badcrystal1 = "PhotonPFCiC.eta[1] < 1.8 && PhotonPFCiC.eta[1] > 1.65 && PhotonPFCiC.phi[1] < 2.2 && PhotonPFCiC.phi[1] > 2";
  TCut badcrystal2 = "PhotonPFCiC.eta[1] < 1.65 && PhotonPFCiC.eta[1] > 1.5&& PhotonPFCiC.phi[1] < -1.95 && PhotonPFCiC.phi[1] > -2.2";
  
  TCut ecal_cut  = !badcrystal1 && !badcrystal2;

  TCut fullcut = "PFMR>100 && PFR^2>.05" + ecal_cut;
  TCut cut_tt = "iSamp==0";
  TCut cut_ff = "iSamp==1";

  Int_t min_mr = 100;
  Int_t max_mr = 1500;
  Float_t min_rsq = .03;
  Float_t max_rsq = 1;
  Int_t nbins_mr = 25;
  Int_t nbins_rsq = 25;

  Int_t min_events  = 1;
  Int_t max_events = 10000;

  TH2F * hist  = new TH2F("hist" ,"hist", nbins_mr,min_mr,max_mr,nbins_rsq,min_rsq,max_rsq);
  TH2F * hist2 = new TH2F("hist2","hist2",nbins_mr,min_mr,max_mr,nbins_rsq,min_rsq,max_rsq);
  TH1F * hist3 = new TH1F("hist3","hist3",nbins_rsq,min_rsq,max_rsq);
  TH1F * hist4 = new TH1F("hist4","hist4",nbins_rsq,min_rsq,max_rsq);
  TH1F * hist5 = new TH1F("hist5","hist5",nbins_mr,min_mr,max_mr);
  TH1F * hist6 = new TH1F("hist6","hist6",nbins_mr,min_mr,max_mr);

  TH2F * hists_2D[2];
  TH1F * hists_1D[4];

  /*  TCut range1 =" run > 160404 && run < 163261 && HLT_RANGE_1";
  TCut range2 = "run > 161216 && run < 166967 && HLT_RANGE_2";
  TCut range3_t = "run > 166347 && run < 180252 && HLT_RANGE_3_T";
  TCut range3_f = "run > 166347 && run < 180252 && HLT_RANGE_3_F";*/






  TCanvas c1;

  HggOutput->Draw("PFR^2:PFMR>>hist",fullcut+cut_gg+cut_tt,"colz");
  gStyle->SetOptStat(0);
  hist.GetXaxis().SetTitle("M_{R} [GeV]");
  hist.GetXaxis().SetRange(min_mr,max_mr);
  hist.GetYaxis().SetTitle("R^{2}");
  
  hist.SetTitle("M_{R} vs R^{2} Tight-Tight");
  hist.SetMinimum(min_events);
  hist.SetMaximum(max_events);
  hist.Draw("colz");
  
  hists_2D[0] = hist;
  c1.SetLogz();

  c1.SaveAs("mr_rsq_tt.pdf");

  c1.SaveAs("mr_rsq_tt.C");

  HggOutput->Draw("PFR^2:PFMR>>hist2",fullcut+cut_gg+cut_ff,"colz");
  gStyle->SetOptStat(0);
  hist2.GetXaxis().SetTitle("M_{R} [GeV]");
  hist2.GetXaxis().SetRange(min_mr,max_mr);
  hist2.GetYaxis().SetTitle("R^{2}");
  
  hist2.SetTitle("M_{R} vs R^{2} Fake-Fake");
  hist2.SetMinimum(min_events);
  hist2.SetMaximum(max_events);
  hist2.Draw("colz");
  
  c1.SetLogz();

  c1.SaveAs("mr_rsq_ff.pdf");
  c1.SaveAs("mr_rsq_ff.C");

  gStyle->SetOptStat(0);

  HggOutput->Draw("PFR^2>>hist3", fullcut+cut_gg+cut_tt);
  hist3.GetXaxis().SetTitle("R^{2}");
  hist3.GetXaxis().SetRange(0,.3);
  hist3.GetYaxis().SetTitle("N events");
  hist3.SetTitle("R^{2} Tight-Tight");

  hist3.Draw();
  c1.SetLogy();
  c1.SaveAs("rsq_tt.pdf");
  c1.SaveAs("rsq_tt.C");

  HggOutput->Draw("PFMR>>hist6", fullcut+cut_gg+cut_tt);
  hist6.GetXaxis().SetTitle("M_{R} [GeV]");
  hist6.GetYaxis().SetTitle("N events");
  hist6.SetTitle("M_{R} Tight-Tight");


  hist6.Draw();
  c1.SetLogy();
  c1.SaveAs("mr_tt.pdf");
  c1.SaveAs("mr_tt.C");


  //WRITE THE FAKE SAMPLES


  HggOutput->Draw("PFR^2>>hist4", fullcut+cut_gg+cut_ff);
  hist4.GetXaxis().SetTitle("R^{2}");
  hist4.GetXaxis().SetRange(0,.3);
  hist4.GetYaxis().SetTitle("N events");
  hist4.SetTitle("R^{2} Fake-Fake");

  hist4.Draw();
  c1.SetLogy();
  c1.SaveAs("rsq_ff.pdf");
  c1.SaveAs("rsq_ff.C");

  HggOutput->Draw("PFMR>>hist6", fullcut+cut_gg+cut_ff);
  hist6.GetXaxis().SetTitle("M_{R} [GeV]");
  hist6.GetYaxis().SetTitle("N events");
  hist6.SetTitle("M_{R} Fake-Fake");
  hists_1D[3] = hist6;


  hist6.Draw();
  c1.SetLogy();
  c1.SaveAs("mr_ff.pdf");
  c1.SaveAs("mr_ff.C");

  /*
  TCanvas FULL("FULL","FULL",1440,900);

  FULL->Divide(2,2,.01,.01);
  FULL_1->cd();
  FULL_1->SetLogy(1);
  hist6->Draw();
  

  FULL_2->cd();
  FULL_2->SetLogy(1);
  hist3->Draw();

  FULL_3->cd();
  FULL_3->SetLogy(1);
  hist5->Draw();

  FULL_4->cd();
  FULL_4->SetLogy(1);
  hist4->Draw();
    
  FULL->SaveAs("projections.pdf");

  TCanvas twoD_FULL("twoD_FULL","twoD_FULL",900,450);
  twoD_FULL->Divide(2,1,.01,.01);

  twoD_FULL_1->cd();
  twoD_FULL_1->SetLogz(1);
  hist->Draw("colz");

  twoD_FULL_2->cd();
  twoD_FULL_2->SetLogz(1);
  hist2->Draw("colz");

  twoD_FULL->SaveAs("mr_rsq_comparison.pdf");
  */
  /*
  TFile output("mr_rsq_hists.root","RECREATE");

  for(Int_t ii = 0; ii < 2; ii++) { 
    hists_2D[ii]->Write();
  }

  for(Int_t ii = 0; ii < 4; ii++) { 
    hists_1D[ii]->Write();
  }

  
  output->Write();
  output->Close();
  */
}
